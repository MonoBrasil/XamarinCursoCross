// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace WebserviceClient.webserviceTeste {
    
    
    /// <remarks/>
    [System.Web.Services.WebServiceBinding(Name="Service1Soap", Namespace="http://tempuri.org/")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Service1 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback MakeLoginOperationCompleted;
        
        public Service1() {
            this.Url = "http://127.0.0.1:8080/Service1.asmx";
        }
        
        public Service1(string url) {
            this.Url = url;
        }
        
        public event MakeLoginCompletedEventHandler MakeLoginCompleted;
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MakeLogin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public bool MakeLogin(string login, string senha) {
            object[] results = this.Invoke("MakeLogin", new object[] {
                        login,
                        senha});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BeginMakeLogin(string login, string senha, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MakeLogin", new object[] {
                        login,
                        senha}, callback, asyncState);
        }
        
        public bool EndMakeLogin(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void MakeLoginAsync(string login, string senha) {
            this.MakeLoginAsync(login, senha, null);
        }
        
        public void MakeLoginAsync(string login, string senha, object userState) {
            if ((this.MakeLoginOperationCompleted == null)) {
                this.MakeLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMakeLoginCompleted);
            }
            this.InvokeAsync("MakeLogin", new object[] {
                        login,
                        senha}, this.MakeLoginOperationCompleted, userState);
        }
        
        private void OnMakeLoginCompleted(object arg) {
            if ((this.MakeLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MakeLoginCompleted(this, new MakeLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    }
    
    public partial class MakeLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MakeLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void MakeLoginCompletedEventHandler(object sender, MakeLoginCompletedEventArgs args);
}
